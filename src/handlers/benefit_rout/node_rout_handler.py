from datetime import datetime
from pathlib import Path

import requests
import json
from aiogram import Router, types

from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    WebAppInfo
)
from urllib.parse import urlencode

from handlers.utils.state_machine import RoutStates
from handlers.utils.keyboards import get_zveno_rout_keyboard
from Algorithm.FindCheapestWay import get_routes
from config import MAP_URL, SERVER_URL

from database.database_manager import save_route_db

router = Router()


@router.callback_query(lambda c: c.data == "benefit_rout")
async def node_rout_handler(callback_query: CallbackQuery, state: FSMContext):
    await state.set_state(RoutStates.ZVENO_ROUT)
    await callback_query.message.answer(text="–í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:")


@router.message(RoutStates.ZVENO_ROUT)
async def node_input_cities(message: types.Message, state: FSMContext):

    user_data = await state.get_data()
    total_days = user_data.get("total_days", 30)
    max_days = user_data.get("max_days", total_days)

    temp_cities = [city.strip() for city in message.text.split(",") if city.strip()]

    await state.update_data(temp_cities=temp_cities, current_days_zveno=1)

    await message.answer(
        "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π:",
        reply_markup=await get_zveno_rout_keyboard(1, max_days)
    )


@router.callback_query(lambda c: c.data in ["pluse_days", "minus_days"])
async def change_days_count(callback_query: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    max_days = user_data.get("max_days", user_data.get("total_days", 30))
    current_days = user_data.get("current_days_zveno", 1)

    action = callback_query.data

    if action == "pluse_days" and current_days < max_days:
        current_days += 1
        max_days -= 1
    elif action == "minus_days" and current_days > 1:
        current_days -= 1
        max_days += 1

    await state.update_data(current_days_zveno=current_days, max_days=max_days)

    new_markup = await get_zveno_rout_keyboard(current_days, max_days)

    print(f"DEBUG: Action: {action}, max_days: {max_days}, current_days_zveno: {current_days}")

    if str(callback_query.message.reply_markup) != str(new_markup):
        await callback_query.message.edit_reply_markup(reply_markup=new_markup)

    await callback_query.answer()


@router.callback_query(lambda c: c.data == "add_zveno")
async def add_node(callback_query: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    temp_cities = user_data.get("temp_cities", [])
    days_count = user_data.get("current_days_zveno", 1)
    zveno_list = user_data.get("zveno_list", [])

    if temp_cities:
        new_zveno = {city: days_count for city in temp_cities}
        zveno_list.append(new_zveno)

        await state.update_data(zveno_list=zveno_list, temp_cities=[], current_days_zveno=1)

    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∑–≤–µ–Ω–∞:")
    await state.set_state(RoutStates.ZVENO_ROUT)


@router.callback_query(lambda c: c.data == "save_zveno")
async def save_node(callback_query: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    route = user_data.get("route", [])
    start_date = user_data.get("start_date")
    temp_cities = user_data.get("temp_cities", [])
    days_count = user_data.get("current_days_zveno", 1)
    zveno_list = user_data.get("zveno_list", [])
    tg_id = callback_query.from_user.id

    if temp_cities:
        new_zveno = {city: days_count for city in temp_cities}
        zveno_list.append(new_zveno)


    await state.update_data(zveno_list=zveno_list, temp_cities=[], current_days_zveno=1)
    print(route, temp_cities, zveno_list,new_zveno)
    CITIES_PATH = Path("Algorithm/city_to_yandex_code.json")

    with open(CITIES_PATH, encoding="utf-8") as f:
        CITY_DATA = json.load(f)

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Å–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    VALID_CITIES = set(city.lower() for city in CITY_DATA.keys())

    start_city = route[0], 0  # –ù–∞—á–∞–ª—å–Ω—ã–π –≥–æ—Ä–æ–¥
    end_city = route[1], 0  # –ö–æ–Ω–µ—á–Ω—ã–π –≥–æ—Ä–æ–¥
    start_city_toDB = route[0]  # –ù–∞—á–∞–ª—å–Ω—ã–π –≥–æ—Ä–æ–¥
    end_city_toDB = route[1]  # –ö–æ–Ω–µ—á–Ω—ã–π –≥–æ—Ä–æ–¥
    cities = [city for group in zveno_list for city in group]
    cities = [start_city_toDB] + cities + [end_city_toDB]
    invalid_cities = [city for city in cities if city.lower() not in VALID_CITIES]

    if invalid_cities:
        await callback_query.message.answer(
            f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –≥–æ—Ä–æ–¥–∞: {', '.join(invalid_cities)}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        await state.clear()
        await callback_query.bot.send_message(
            callback_query.from_user.id,
            text="–í–æ–∑–≤—Ä–∞—Ç –≤ –Ω–∞—á–∞–ª–æ...",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="create_trip")]
            ])
        )
        return




    formatted_zveno_list = "\n".join(
        [f"{i + 1} –∑–≤–µ–Ω–æ: {zveno}" for i, zveno in enumerate(zveno_list)]
    )




    departure_date = datetime.strptime(start_date, "%Y-%m-%d")  # –î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è

    await save_route_db(tg_id, cities)

    # –°–µ–≥–º–µ–Ω—Ç—ã –º–∞—Ä—à—Ä—É—Ç–∞ (–ø—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö)
    segments = [[(city, days) for city, days in group.items()] for group in zveno_list]
    print(segments,start_city,end_city,type(departure_date))

    # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤
    routes = get_routes(start_city, end_city, departure_date, segments)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    user_id = callback_query.from_user.id  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
    server_url = SERVER_URL
    response = requests.post(server_url, json={"user_id": str(user_id), "routes": routes}, verify = False)

    if response.status_code != 200:
        await callback_query.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–∞—Ä—Ç—ã


    base_url = MAP_URL
    params = urlencode({"user_id": user_id})
    full_url = f"{base_url}?{params}"

    keyboard = [
        [InlineKeyboardButton(
            text="–û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É",
            web_app=WebAppInfo(url=full_url)
        )]
    ]

    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π
    await callback_query.message.edit_text(
        f"–ú–∞—Ä—à—Ä—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É:\n–í–∞—à –º–∞—Ä—à—Ä—É—Ç:\n{formatted_zveno_list}",
        reply_markup=reply_markup
    )
    await callback_query.answer()

@router.callback_query(lambda c: c.data.startswith("web_app_data"))
async def handle_web_app_data(callback_query: CallbackQuery):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_query
    data = callback_query.data.split(":")[1]  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Ä–∞–∑–¥–µ–ª–µ–Ω—ã ":"
    try:
        parsed_data = json.loads(data)  # –ü–∞—Ä—Å–∏–º JSON-—Å—Ç—Ä–æ–∫—É
        user_id = parsed_data.get("user_id")

        if not user_id:
            await callback_query.message.answer("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å user_id.")
            return

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –º–∞—Ä—à—Ä—É—Ç—ã —Å —Å–µ—Ä–≤–µ—Ä–∞
        server_url = f"https://6660-45-8-147-174.ngrok-free.app/api/final-routes?user_id={user_id}"
        response = requests.get(server_url)

        if response.status_code == 200:
            routes = response.json()
            formatted_routes = "\n".join(routes)
            print("123")
            await callback_query.message.answer(f"–í–∞—à–∏ –º–∞—Ä—à—Ä—É—Ç—ã:\n{formatted_routes}")
        else:
            await callback_query.message.answer("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç—ã.")

    except Exception as e:
        await callback_query.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")




